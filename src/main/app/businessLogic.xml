<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:spring="http://www.springframework.org/schema/beans" 
  	  xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" 
  	  xmlns:sap="http://www.mulesoft.org/schema/mule/sap"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    
    <flow name="mainFlow"  doc:description="This flow is the entry point to the Template business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.">

        <flow-ref name="gatherDataFlow" doc:name="Call gatherDataFlow"/>
        <flow-ref name="formatOutputFlow" doc:name="Call formatOutputFlow"/>
        <flow-ref name="outboundFlow" doc:name="Call outboundFlow"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="gatherDataFlow" processingStrategy="synchronous">
        <scatter-gather doc:name="Scatter-Gather">
            <custom-aggregation-strategy class="org.mule.templates.transformers.EmployeeMergeAggregationStrategy"/>
            <flow-ref name="workdayRetrievalMapperFlow" doc:name="Call workdayMapperFlow"/>
            <flow-ref name="sapRetrievalMapperFlow" doc:name="Call sapMapperFlow"/>
        </scatter-gather>
    </flow>
    <sub-flow name="sapRetrievalMapperFlow" >
        <processor-chain doc:name="Processor Chain">
            <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="BAPI_EMPLOYEE_GETDATA" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Query SAP employees">
                <sap:definition><![CDATA[<BAPI_EMPLOYEE_GETDATA>
	<import>
		<LASTNAME_M>*ADAMS*</LASTNAME_M>
	</import>
</BAPI_EMPLOYEE_GETDATA>
]]></sap:definition>


            </sap:outbound-endpoint>
            <dw:transform-message doc:name="SAP Employees to Map">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload."BAPI_EMPLOYEE_GETDATA".tables."PERSONAL_DATA".*row map
{
	Id: $.PERNO,
	FirstName: $.FSTNAME_M,
	LastName: $.LASTNAME_M,
	Username: using (employeeId = $.PERNO) (payload."BAPI_EMPLOYEE_GETDATA".tables."COMMUNICATION".*row filter ($.PERNO == employeeId)
)[0].USERID,
  Email: using (employeeId = $.PERNO) (payload."BAPI_EMPLOYEE_GETDATA".tables."COMMUNICATION".*row filter ($.PERNO == employeeId)
)[0].USRID_LONG
}]]></dw:set-payload>
            </dw:transform-message>

        </processor-chain>
    </sub-flow>
    <sub-flow name="workdayRetrievalMapperFlow" >
        <processor-chain doc:name="Processor Chain">
            <dw:transform-message doc:name="Create GetWorkers Request">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java 
--- 
{ 
	requestCriteria: { 
		excludeInactiveWorkers: true
	},
	responseFilter: {
		count: p('wday.page.size')
	}
} as :object {class: "com.workday.hr.GetWorkersRequestType"}]]></dw:set-payload>
            </dw:transform-message>
            <wd-hr:get-workers config-ref="WorkdayHumanResource"  doc:name="Get Workers from Workday"/>
            <dw:transform-message doc:name="Workday Workers to Maps">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.responseData.worker map
{
	Id: $.workerReference.ID[1].value,
	Name: $.workerData.personalData.nameData.legalNameData.nameDetailData.formattedName,
	Email: $.workerData.personalData.contactData.emailAddressData[-1].emailAddress,
	Username: $.workerData.userAccountData.userName default null
}]]></dw:set-payload>
            </dw:transform-message>

        </processor-chain>
    </sub-flow>
    
    <sub-flow name="formatOutputFlow" >
        <custom-transformer class="org.mule.templates.transformers.SortWorkersAndEmployeesList" doc:name="Custom component to sort employees list"/>
        <dw:transform-message doc:name="transform Collection of Maps to CSV Format">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/csv header=true, quoteValues=true
---
payload map
{
	Name: $.Name,
	Email: $.Email,
	"Id in Workday": $.IDInWorkday,
	"Id in SAP": $.IDInSap,
	"Username in Workday": $.WorkerNameInWorkday,
	"Username in SAP": $.UserNameInSap
}]]></dw:set-payload>
        </dw:transform-message>
        <object-to-string-transformer doc:name="CSV Output Object to String"/>
    </sub-flow>
</mule>
